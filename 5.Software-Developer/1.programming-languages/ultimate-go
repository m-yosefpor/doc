padding, alignment

value vs pointer:
    - efficiency (lower memory)
    - reduced complexity
    + safety, side effects


factory function (like constructors))



bad:
    u = &user{}
    return u

good:
    u = user{}

    return &u


better:
    u = user{}
    return u (but pass a full copy all the way up!?)



zero define only with var, all non zero with :=
value construction to a var NEVER pointer, unless it is construction directly on return, or inside function call
but in constuction to a var, never

25% gc, gomaxproc=4 at least is good for cloud


core type -> value semantic:
    null is not absent
