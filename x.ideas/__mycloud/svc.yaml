# ingress
# service
ideal cluster:
- everything on BM
- no specific role nodes (maybe except for gpu), only compute and worker
- cilium service mesh in ebpf mode, with full SMI support.
- ceph-csi + rook
- multi-cluster networking, a service can be exposed in multiple clusters


---
apiVersion: v1
kind: Service
metadata:
  name: rebel-base
spec:
  type: ClusterIP # Headless, LB
  clusterIP: # auto-gen
  loadBalancerIP: # auto-gen
  match:
  - name: firefox-users
    headers:
      user-agent: ".*Firefox.*"
    uri: sth
  - match:
    - headers:
        end-user:
          exact: jason
      uri:
        prefix: "/ratings/v2/"
      ignoreUriCase: true
  backend:
  - service: website-v1
    weight: 90
  selector:
    name: rebel-base


  hosts:
  - mongo.prod.svc.cluster.local
  tcp:
  - match:
    - port: 27017
    route:
    - destination:
        host: mongo.backup.svc.cluster.local
        port:
          number: 5555
      headers:
        response:
          remove:
          - foo



    redirect:
      uri: /v1/bookRatings
      authority: newratings.default.svc.cluster.local



    retries:
      attempts: 3
      perTryTimeout: 2s
      retryOn: gateway-error,connect-failure,refused-stream
-----

ui workflow:

lb as a service -> L4 / L7 -> internal /external -> frontend -> backend




apiVersion: networking.snappcloud.io/v1
kind: L4LB
metadata:
  name: example
spec:
  type: ClusterIP # Headless, LB
  clusterIP: # auto-gen
  loadBalancerIP: # auto-gen
  ports:
  - name: metrics
    protocol: TCP
    port: 80
    targetPort: 8080
  backends:
    - type: external
      name: sth
      ip: sth
    - type: pod
      name: sthelse
      # namespace:, region
      selector:
        app.kubernetes.io/name: argocd-application-controller
        app.kubernetes.io/instance: argocd
